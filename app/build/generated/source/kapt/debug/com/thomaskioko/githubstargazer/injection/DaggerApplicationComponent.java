// Generated by Dagger (https://dagger.dev).
package com.thomaskioko.githubstargazer.injection;

import android.content.Context;
import com.squareup.moshi.Moshi;
import com.thomaskioko.githubstargazer.repository.api.GithubRepository;
import com.thomaskioko.githubstargazer.repository.GithubRepository_Factory;
import com.thomaskioko.githubstargazer.repository.injection.GitHubApiModule_ProvideGitHubApiFactory;
import com.thomaskioko.githubstargazer.repository.injection.GitHubApiModule_ProvideMoshiFactory;
import com.thomaskioko.githubstargazer.repository.injection.GitHubApiModule_ProvideOkHttpConfiguratorFactory;
import com.thomaskioko.githubstargazer.repository.injection.GitHubApiModule_ProvideOkHttpFactory;
import com.thomaskioko.githubstargazer.repository.injection.GitHubApiModule_ProvideRetrofitFactory;
import com.thomaskioko.githubstargazer.repository.api.service.GitHubService;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Call;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent implements ApplicationComponent {
  private final Context context;

  private Provider<Moshi> provideMoshiProvider;

  private Provider<Call.Factory> provideOkHttpProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<GitHubService> provideGitHubApiProvider;

  private Provider<GithubRepository> githubRepositoryProvider;

  private DaggerApplicationComponent(Context contextParam) {
    this.context = contextParam;
    initialize(contextParam);
  }

  public static ApplicationComponent.Factory factory() {
    return new Factory();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Context contextParam) {
    this.provideMoshiProvider = DoubleCheck.provider(GitHubApiModule_ProvideMoshiFactory.create());
    this.provideOkHttpProvider = DoubleCheck.provider(GitHubApiModule_ProvideOkHttpFactory.create(GitHubApiModule_ProvideOkHttpConfiguratorFactory.create()));
    this.provideRetrofitProvider = DoubleCheck.provider(GitHubApiModule_ProvideRetrofitFactory.create(provideMoshiProvider, provideOkHttpProvider));
    this.provideGitHubApiProvider = DoubleCheck.provider(GitHubApiModule_ProvideGitHubApiFactory.create(provideRetrofitProvider));
    this.githubRepositoryProvider = DoubleCheck.provider(GithubRepository_Factory.create(provideGitHubApiProvider));
  }

  @Override
  public Context appContext() {
    return context;}

  @Override
  public GithubRepository githubRepository() {
    return githubRepositoryProvider.get();}

  private static final class Factory implements ApplicationComponent.Factory {
    @Override
    public ApplicationComponent create(Context context) {
      Preconditions.checkNotNull(context);
      return new DaggerApplicationComponent(context);
    }
  }
}
