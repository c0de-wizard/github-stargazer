// Code generated by moshi-kotlin-codegen. Do not edit.
package com.thomaskioko.githubstargazer.repository.api.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class RepoResponseJsonAdapter(
    moshi: Moshi
) : JsonAdapter<RepoResponse>() {
    private val options: JsonReader.Options = JsonReader.Options.of(
        "id", "name", "description",
        "owner", "stargazers_count", "forks", "contributors_url", "created_at", "updated_at"
    )

    private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(), "id")

    private val stringAdapter: JsonAdapter<String> = moshi.adapter(
        String::class.java, emptySet(),
        "name"
    )

    private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(
        String::class.java,
        emptySet(), "description"
    )

    private val userResponseAdapter: JsonAdapter<UserResponse> =
        moshi.adapter(UserResponse::class.java, emptySet(), "owner")

    private val intAdapter: JsonAdapter<Int> = moshi.adapter(
        Int::class.java, emptySet(),
        "stargazersCount"
    )

    override fun toString(): String = buildString(34) {
        append("GeneratedJsonAdapter(").append("RepoResponse").append(')')
    }

    override fun fromJson(reader: JsonReader): RepoResponse {
        var id: Long? = null
        var name: String? = null
        var description: String? = null
        var owner: UserResponse? = null
        var stargazersCount: Int? = null
        var forksCount: Int? = null
        var contributorsUrl: String? = null
        var createdDate: String? = null
        var updatedDate: String? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> id = longAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
                1 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "name", "name",
                    reader
                )
                2 -> description = nullableStringAdapter.fromJson(reader)
                3 -> owner = userResponseAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "owner",
                    "owner", reader
                )
                4 ->
                    stargazersCount = intAdapter.fromJson(reader)
                        ?: throw Util.unexpectedNull("stargazersCount", "stargazers_count", reader)
                5 -> forksCount = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "forksCount",
                    "forks", reader
                )
                6 ->
                    contributorsUrl = stringAdapter.fromJson(reader)
                        ?: throw Util.unexpectedNull("contributorsUrl", "contributors_url", reader)
                7 ->
                    createdDate = stringAdapter.fromJson(reader)
                        ?: throw Util.unexpectedNull("createdDate", "created_at", reader)
                8 ->
                    updatedDate = stringAdapter.fromJson(reader)
                        ?: throw Util.unexpectedNull("updatedDate", "updated_at", reader)
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        return RepoResponse(
            id = id ?: throw Util.missingProperty("id", "id", reader),
            name = name ?: throw Util.missingProperty("name", "name", reader),
            description = description,
            owner = owner ?: throw Util.missingProperty("owner", "owner", reader),
            stargazersCount = stargazersCount ?: throw Util.missingProperty(
                "stargazersCount",
                "stargazers_count", reader
            ),
            forksCount = forksCount ?: throw Util.missingProperty("forksCount", "forks", reader),
            contributorsUrl = contributorsUrl ?: throw Util.missingProperty(
                "contributorsUrl",
                "contributors_url", reader
            ),
            createdDate = createdDate ?: throw Util.missingProperty(
                "createdDate", "created_at",
                reader
            ),
            updatedDate = updatedDate ?: throw Util.missingProperty("updatedDate", "updated_at", reader)
        )
    }

    override fun toJson(writer: JsonWriter, value: RepoResponse?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("id")
        longAdapter.toJson(writer, value.id)
        writer.name("name")
        stringAdapter.toJson(writer, value.name)
        writer.name("description")
        nullableStringAdapter.toJson(writer, value.description)
        writer.name("owner")
        userResponseAdapter.toJson(writer, value.owner)
        writer.name("stargazers_count")
        intAdapter.toJson(writer, value.stargazersCount)
        writer.name("forks")
        intAdapter.toJson(writer, value.forksCount)
        writer.name("contributors_url")
        stringAdapter.toJson(writer, value.contributorsUrl)
        writer.name("created_at")
        stringAdapter.toJson(writer, value.createdDate)
        writer.name("updated_at")
        stringAdapter.toJson(writer, value.updatedDate)
        writer.endObject()
    }
}
